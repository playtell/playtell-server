<% content_for :head do %>
<%= javascript_include_tag 'playdate' %>
<script src="http://staging.tokbox.com/v0.91/js/TB.min.js" type="text/javascript" charset="utf-8"></script> 
<script type="text/javascript">
    var sessionId = "<%= @playdate.video_session_id %>"; 
    var token = "<%= @tok_token %>"; 
	var apiKey = "<%= @api_key %>";
	var session;
	var publisher;

	var PUBLISHER_WIDTH = 142;
	var PUBLISHER_HEIGHT = 119;
			
	var SUBSCRIBER_WIDTH = 450;
	var SUBSCRIBER_HEIGHT = 390;

	var subscribers = {};
	var deviceManager;
	
	var inSetup = true;
				
			//--------------------------------------
			//  LINK CLICK HANDLERS
			//--------------------------------------

			/* 
			If testing the app from the desktop, be sure to check the Flash Player Global Security setting
			to allow the page from communicating with SWF content loaded from the web. For more information,
			see http://www.tokbox.com/opentok/build/tutorials/basictutorial.html#localTest
			*/
			function connect() {
				session.connect(apiKey, token);
			}

			function disconnect() {
				if (!inSetup) {
					session.signal();
				}
				session.disconnect();
				//hide('disconnect-link');
				//hide('publish-link');
				//hide('unpublish-link');
			}

			function publish(location) {
				if (!publisher) {
					var parentDiv = document.getElementById(location);
					var div = document.createElement('div');			// Create a replacement div for the publisher
					div.setAttribute('id', 'opentok_publisher');
					parentDiv.appendChild(div);
					var publisherProps = {width: PUBLISHER_WIDTH, height: PUBLISHER_HEIGHT, microphoneEnabled: true};
					publisher = session.publish('opentok_publisher', publisherProps); 	// Pass the replacement div id to the publish method
					//show('unpublish-link');
					//hide('publish-link');
				}
			}

			function unpublish() {
				if (publisher) {
					session.unpublish(publisher);
				}
				publisher = null;

				//show('publish-link');
				//hide('unpublish-link');
			}
			
			function subscribeAndPublish() {
				// Subscribe to all streams currently in the Session
				for (var i = 0; i < event.streams.length; i++) {
					addStream(event.streams[i]);
				}
				
				show('disconnect-link');
				hide('connect-link');
				publish("my-camera");				
			}

			//--------------------------------------
			//  OPENTOK EVENT HANDLERS
			//--------------------------------------

			function sessionConnectedHandler(event) {
				for (var i = 0; i < event.streams.length; i++) {
					addStream(event.streams[i]);
				}
				publish("my-camera");
				//listen for device status event
				//deviceManager = TB.initDeviceManager(apiKey);
				//deviceManager.addEventListener("devicesDetected", devicesDetectedHandler);
				//deviceManager.detectDevices();
			}
			
			function devicesDetectedHandler(event) {
				if (inSetup) {
					if (event.selectedCamera) {
						if (event.selectedCamera.status	== "unknown") {
							inSetup = true;
							$("#setup").removeClass("hidden");
							deviceManager.removeEventListener("devicesDetected", function(){});
							publish("setup");
							publisher.addEventListener("accessAllowed", accessAllowedHandler);
						}
						//else {
							//inSetup = false;
						//	publish("my-camera");
						//}				
					}
				}
			}
			
			function accessAllowedHandler(event) {
				publisher.removeEventListener("accessAllowed", function(){});
				$("#setup").html("success!");
				$("#setup").addClass("hidden");
				unpublish();
				publish("my-camera");
			}

			function streamCreatedHandler(event) {
				// Subscribe to these newly created streams
				for (var i = 0; i < event.streams.length; i++) {
					addStream(event.streams[i]);
				}
			}

			function streamDestroyedHandler(event) {
				// This signals that a stream was destroyed. Any Subscribers will automatically be removed. 
				// This default behaviour can be prevented using event.preventDefault()
			}

			function sessionDisconnectedHandler(event) {
				// This signals that the user was disconnected from the Session. Any subscribers and publishers
				// will automatically be removed. This default behaviour can be prevented using event.preventDefault()
				publisher = null;

				//show('connect-link');
				//hide('disconnect-link');
				//hide('publish-link');
				//hide('unpublish-link');
			}

			function connectionDestroyedHandler(event) {
				// This signals that connections were destroyed
			}

			function connectionCreatedHandler(event) {
				// This signals new connections have been created (ie another person has joined the session)
			}

			/* 
			If you un-comment the call to TB.setEventLister(), above, OpenTok 
			calls the exceptionHandler() method when exception events occur. 
			You can modify this method to further process exception events.
			If you un-comment the call to TB.setLogLevel(), above, OpenTok 
			automatically displays exception event messages. 
			*/
			function exceptionHandler(event) {
				alert("Exception: " + event.code + "::" + event.message);
			}
			
			function signalReceivedHandler (event) {
				if (event.fromConnection.connectionId != session.connection.connectionId) {
					$.get("<%= update_playdate_path %>");
				}
			}
			

			//--------------------------------------
			//  HELPER METHODS
			//--------------------------------------

			function addStream(stream) {
				// Check if this is the stream that I am publishing. If not
				// we choose to subscribe to the stream.
				if (stream.connection.connectionId == session.connection.connectionId) {
//					if (inSetup) {
//						$("#setup").html("success!");
//						$("#setup").addClass("hidden");
//						unpublish();
//						publish("my-camera");
//						return;
//					}
//					else {
//						return;
//					}
					return;
				}
				var parentDiv = document.getElementById("fam-camera-holder");

				var div = document.createElement('div');	// Create a replacement div for the subscriber
				var divId = stream.streamId;	// Give the replacement div the id of the stream as its id
				div.setAttribute('id', divId);			
				parentDiv.appendChild(div);
				var subscriberProps = {width: SUBSCRIBER_WIDTH, height: SUBSCRIBER_HEIGHT, microphoneEnabled: true};
				subscribers[stream.streamId] = session.subscribe(stream, divId, subscriberProps);
			}
			
			$(document).ready(function() {
				// writes out the page direction so it can be used later.
				// upon success, signals the other player in the playdate to ping the server for the latest view of the book	
				$('#turn-page')
					.bind('ajax:beforeSend', function() {
						updatePage($('#page-direction').val());
					})
					.bind('ajax:success', function() {
						//if (subscribers.length > 0) {
							session.signal();
						//}
					});					

				//writes out the page direction and new page number to be used later
				$('#next-page').click(function() {
					$('#page-direction').val("next");
					$('#new-page').val(getNewPage(getCurrentPage(), "next"));
				});

				$("#prev-page").click(function() {
					$('#page-direction').val("previous");
					$('#new-page').val(getNewPage(getCurrentPage(), "previous"));
				});
				
				$("#first-page").click(function() {
					$('#page-direction').val("beginning");
					$('#new-page').val(1);
				});
				
				$('#connect-link').click(function() {
					connect();
				});
				
				$('#disconnect-link').click(function() {
					disconnect();
				});
				
				$('#fullscreen').click(function() {
					maxWindow();
				});
				
				$('#setup-lightbox').lightbox_me({
				    centered: true, 
				});
					
				// book setup and display	
				var currentPage = 1;
				// TODO: change currentPage to "<%= @playdate.page_num %>"; 
				$('#page_'+currentPage).animate({
					left: 0
				});
				//show("page_"+currentPage);
				updateBookNavLinks(currentPage);
				
				// opentok video session setup and display
				
				// Un-comment either of the following to set automatic logging and exception handling.
				// See the exceptionHandler() method below.
				// TB.setLogLevel(TB.DEBUG);
				// TB.addEventListener("exception", exceptionHandler);

				if (TB.checkSystemRequirements() != TB.HAS_REQUIREMENTS) {
					alert('You do not have the minimum system requirements to use this service :(');
				} else {
					session = TB.initSession(sessionId);	// Initialize session
					// Add event listeners to the session
					session.addEventListener('sessionConnected', sessionConnectedHandler);
					session.addEventListener('sessionDisconnected', sessionDisconnectedHandler);
					session.addEventListener('connectionCreated', connectionCreatedHandler);
					session.addEventListener('connectionDestroyed', connectionDestroyedHandler);
					session.addEventListener('streamCreated', streamCreatedHandler);
					session.addEventListener('streamDestroyed', streamDestroyedHandler);
					session.addEventListener('signalReceived', signalReceivedHandler);

					connect();
				}
			});
			
</script>
<% end %>

	<div id="videos">
		<div class="activity-content">
			<%= render :partial => "book" %>
			<div class="clear"></div>
		</div>
		<div class="video-content">
			<div id="fam-camera-holder"></div>
			<div id="my-camera-holder">
				<div id="my-camera"></div>
			</div>
			<div id="links">
				<button id="setup-button" class="blue">Setup</button>				
				<%= link_to '#' do %>
					<button id="connect-link" class="blue hidden">Connect</button>
				<% end %>
				<%= button_to "End Playdate", disconnect_playdate_path, :class=>"red", :id=>"disconnect-link" %>
			</div>
			<div class="clear"></div>
		</div>
		<div class="clear"></div>	
	</div>
	
	<div id="setup-lightbox" class="lightbox hidden">
			<h1>One quick tip </h1>
		<div>
			<h4>If you see this box, click "Allow." This gives Ragatzi permission to use your camera.</h4>
			<%= image_tag "flashbox.png" %>
			<p>In the future, you'll be able to say "don't show me this again." But not yet, sorry!</p>
		</div>
		<button class="close blue">X</button>
	</div>


