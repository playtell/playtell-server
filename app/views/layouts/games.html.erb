<!DOCTYPE html>
<html>
<head>
  <title>Semiralabs</title>
  <%= stylesheet_link_tag :all %>
  <script src="http://staging.tokbox.com/v0.91/js/TB.min.js" type="text/javascript" charset="utf-8"></script>  
  <%= javascript_include_tag :defaults %>
  <script type="text/javascript">
      var sessionId = "<%= @tok_session_id %>"; 
      var token = "<%= @tok_token %>"; 
	  var apiKey = "<%= @api_key %>";
			var session;
			var publisher;

			var PUBLISHER_WIDTH = 170;
			var PUBLISHER_HEIGHT = 170;
			
			var SUBSCRIBER_WIDTH = 490;
			var SUBSCRIBER_HEIGHT = 400;

			var subscribers = {};

			// Un-comment either of the following to set automatic logging and exception handling.
			// See the exceptionHandler() method below.
			// TB.setLogLevel(TB.DEBUG);
			// TB.addEventListener("exception", exceptionHandler);

			if (TB.checkSystemRequirements() != TB.HAS_REQUIREMENTS) {
				alert('Minimum System Requirements not met!');
			} else {
				session = TB.initSession(sessionId);	// Initialize session

				// Add event listeners to the session
				session.addEventListener('sessionConnected', sessionConnectedHandler);
				session.addEventListener('sessionDisconnected', sessionDisconnectedHandler);
				session.addEventListener('connectionCreated', connectionCreatedHandler);
				session.addEventListener('connectionDestroyed', connectionDestroyedHandler);
				session.addEventListener('streamCreated', streamCreatedHandler);
				session.addEventListener('streamDestroyed', streamDestroyedHandler);
				
				session.connect(apiKey, token);
			}

			//--------------------------------------
			//  LINK CLICK HANDLERS
			//--------------------------------------

			/* 
			If testing the app from the desktop, be sure to check the Flash Player Global Security setting
			to allow the page from communicating with SWF content loaded from the web. For more information,
			see http://www.tokbox.com/opentok/build/tutorials/basictutorial.html#localTest
			*/
			function connect() {
				session.connect(apiKey, token);
			}

			function disconnect() {
				session.disconnect();
				hide('disconnectLink');
				hide('publishLink');
				hide('unpublishLink');
			}

			function publish() {
				if (!publisher) {
					var parentDiv = document.getElementById("myCamera");
					var div = document.createElement('div');			// Create a replacement div for the publisher
					div.setAttribute('id', 'opentok_publisher');
					parentDiv.appendChild(div);
					var publisherProps = {width: PUBLISHER_WIDTH, height: PUBLISHER_HEIGHT, microphoneEnabled: true};
					publisher = session.publish('opentok_publisher', publisherProps); 	// Pass the replacement div id to the publish method
					show('unpublishLink');
					hide('publishLink');
				}
			}

			function unpublish() {
				if (publisher) {
					session.unpublish(publisher);
				}
				publisher = null;

				show('publishLink');
				hide('unpublishLink');
			}

			//--------------------------------------
			//  OPENTOK EVENT HANDLERS
			//--------------------------------------

			function sessionConnectedHandler(event) {
				// Subscribe to all streams currently in the Session
				for (var i = 0; i < event.streams.length; i++) {
					addStream(event.streams[i]);
				}
				show('disconnectLink');
				show('publishLink');
				hide('connectLink');
			}

			function streamCreatedHandler(event) {
				// Subscribe to these newly created streams
				for (var i = 0; i < event.streams.length; i++) {
					addStream(event.streams[i]);
				}
			}

			function streamDestroyedHandler(event) {
				// This signals that a stream was destroyed. Any Subscribers will automatically be removed. 
				// This default behaviour can be prevented using event.preventDefault()
			}

			function sessionDisconnectedHandler(event) {
				// This signals that the user was disconnected from the Session. Any subscribers and publishers
				// will automatically be removed. This default behaviour can be prevented using event.preventDefault()
				publisher = null;

				show('connectLink');
				hide('disconnectLink');
				hide('publishLink');
				hide('unpublishLink');
			}

			function connectionDestroyedHandler(event) {
				// This signals that connections were destroyed
			}

			function connectionCreatedHandler(event) {
				// This signals new connections have been created.
			}

			/* 
			If you un-comment the call to TB.setEventLister(), above, OpenTok 
			calls the exceptionHandler() method when exception events occur. 
			You can modify this method to further process exception events.
			If you un-comment the call to TB.setLogLevel(), above, OpenTok 
			automatically displays exception event messages. 
			*/
			function exceptionHandler(event) {
				alert("Exception: " + event.code + "::" + event.message);
			}

			//--------------------------------------
			//  HELPER METHODS
			//--------------------------------------

			function addStream(stream) {
				// Check if this is the stream that I am publishing. If not
				// we choose to subscribe to the stream.
				if (stream.connection.connectionId == session.connection.connectionId) {
					return;
				}

				var parentDiv = document.getElementById("famCamera");

				var div = document.createElement('div');	// Create a replacement div for the subscriber
				var divId = stream.streamId;	// Give the replacement div the id of the stream as its id
				div.setAttribute('id', divId);			
				parentDiv.appendChild(div);
				var subscriberProps = {width: SUBSCRIBER_WIDTH, height: SUBSCRIBER_HEIGHT, microphoneEnabled: true};
				subscribers[stream.streamId] = session.subscribe(stream, divId, subscriberProps);
			}

			function show(id) {
				document.getElementById(id).style.display = 'inline';
			}

			function hide(id) {
				document.getElementById(id).style.display = 'none';
			}
  </script>

  <%= csrf_meta_tag %>

</head>
<body>
<div class="mainContainer">
	<div id="header">
		<h1 id="topHeader">Ragatzi Labs</h1>
		<%= image_tag "mad_scientist.gif", :id => "scientistImage" %>
	</div>
	<%= yield %>
</div>
</body>
</html>
